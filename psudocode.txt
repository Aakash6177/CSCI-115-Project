// A brute force method to find if two elements of an array equal a given sum
bruteFindSum(Array[], arraySize, sum)
	
	// Loop through all elements of the array			O(n - 1)
	for i <- 0 to arraySize-1

		// Loop through all elements after i			O(n - 2)
		for j <- i+1 to arraySize

			// If sum is found return true				O(1)
			if Array[i] + Array[j] == sum
				return true

	// If sum is not found return false					O(1)
	return false



Overall Time: O(n^2)




// An efficient method to find if two elements of an array equal a given sum
efficientMergeFindSum(Array[], ararySize, sum)

	// Perform a merge sort to sort the data
	merge_sort(Array, 0, ararySize-1)					O(nlogn)

	// Set two variables -								O(1)
	// One at the first(left) index and 
	// One at the last(right) index
	left <- 0
	right <- arraySize-1

	// Continue loop while left < right					O(n)
	while left < right
		
		// If both elements equal sum
		if Array[left] + Array[right] == sum			O(1)
			then return true

		// Else if both elements are less than sum
		else if Array[left] + Array[right] < sum		O(1)

			// Increment left
			then left++
		
		// Else if both elements are more than sum
		else if Array[left] + Array[right] > sum		O(1)

			// Decrement right
			then right--

	// If sum is not found return false					O(1)
	return false


Overall Time: O(nlogn)


// An efficient method to find if two elements of an array equal a given sum
efficientCountFindSum(Array[], ararySize, sum)

	// Perform a merge sort to sort the data
	count_sort(Array, 0, ararySize-1)					O(n)

	// Set two variables -								O(1)
	// One at the first(left) index and 
	// One at the last(right) index
	left <- 0
	right <- arraySize-1

	// Continue loop while left < right					O(n)
	while left < right
		
		// If both elements equal sum
		if Array[left] + Array[right] == sum			O(1)
			then return true

		// Else if both elements are less than sum
		else if Array[left] + Array[right] < sum		O(1)

			// Increment left
			then left++
		
		// Else if both elements are more than sum
		else if Array[left] + Array[right] > sum		O(1)

			// Decrement right
			then right--

	// If sum is not found return false					O(1)
	return false


Overall Time: O(n)